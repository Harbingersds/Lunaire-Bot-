const { Client, GatewayIntentBits } = require('discord.js');
const serverConfig = require('./config/server-config.js');
const permissions = require('./config/permissions.js');
const features = require('./config/features-config.js');

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.GuildMessageReactions,
    GatewayIntentBits.GuildPresences
  ]
});

client.config = serverConfig;
client.permissions = permissions;
client.features = features;

// ========================
// BOT READY EVENT
// ========================
client.once('ready', () => {
  console.log('='.repeat(50));
  console.log(`🏰 LUNAIRE - HARBINGERS SERVER MANAGER`);
  console.log(`✅ ${client.user.tag} is now online!`);
  console.log(`🛡️  Core Systems: Moderation, Logging, Roles`);
  console.log(`🎯 Server: ${client.guilds.cache.size} guild(s)`);
  
  if (client.features.ENABLED_FEATURES.SEVENWSEVEN_HELPER) {
    console.log(`🎴 7w7 Helper: Integration enabled`);
  }
  
  console.log('='.repeat(50));
  
  client.user.setActivity(client.config.BOT.STATUS, { 
    type: client.config.BOT.ACTIVITY_TYPE 
  });
});

// ========================
// PERMISSION CHECK SYSTEM
// ========================
function checkPermission(message, requiredLevel) {
  const member = message.member;
  const userId = message.author.id;
  
  if (client.config.BOT.OWNER_IDS.includes(userId)) return true;
  
  const levelConfig = client.permissions.LEVELS[requiredLevel];
  if (!levelConfig) return false;
  
  const hasRole = levelConfig.ROLES.some(roleId => 
    member.roles.cache.has(roleId)
  );
  
  const hasUser = levelConfig.USERS.includes(userId);
  
  return hasRole || hasUser;
}

// ========================
// MESSAGE COMMAND HANDLER
// ========================
client.on('messageCreate', async (message) => {
  if (!message.content.startsWith(client.config.SERVER.PREFIX) || message.author.bot) return;
  
  const args = message.content.slice(client.config.SERVER.PREFIX.length).trim().split(/ +/);
  const command = args.shift().toLowerCase();
  
  // HELP COMMAND
  if (command === 'help') {
    const helpEmbed = {
      color: client.config.SERVER.ACCENT_COLOR,
      title: '🏰 Lunaire - Harbingers Server Manager',
      description: 'Complete server management system',
      fields: [
        {
          name: '🛡️ Moderation',
          value: '`!kick` `!ban` `!clear` `!warn`',
          inline: true
        },
        {
          name: '👥 Member Tools',
          value: '`!userinfo` `!serverinfo` `!avatar`',
          inline: true
        },
        {
          name: '⚙️ Utilities',
          value: '`!roles` `!announce` `!slowmode`',
          inline: true
        }
      ],
      footer: { text: `Use ${client.config.SERVER.PREFIX}help <command> for details` }
    };
    
    if (client.features.ENABLED_FEATURES.SEVENWSEVEN_HELPER) {
      helpEmbed.fields.push({
        name: '🎴 7w7 Helper',
        value: '`!7w7help` `!7w7ping` `!7w7tiers`',
        inline: true
      });
    }
    
    message.channel.send({ embeds: [helpEmbed] });
  }
  
  // SERVER INFO COMMAND
  else if (command === 'serverinfo' || command === 'server') {
    const guild = message.guild;
    const owner = await guild.fetchOwner();
    
    const serverInfo = {
      color: client.config.SERVER.ACCENT_COLOR,
      title: `🏰 ${guild.name} Server Information`,
      thumbnail: { url: guild.iconURL() },
      fields: [
        { name: '👑 Owner', value: owner.user.tag, inline: true },
        { name: '🆔 Server ID', value: guild.id, inline: true },
        { name: '📅 Created', value: `<t:${Math.floor(guild.createdTimestamp / 1000)}:R>`, inline: true },
        { name: '👥 Members', value: `${guild.memberCount}`, inline: true },
        { name: '📁 Channels', value: `${guild.channels.cache.size}`, inline: true },
        { name: '🎭 Roles', value: `${guild.roles.cache.size}`, inline: true },
        { name: '🚀 Boost Level', value: `Level ${guild.premiumTier}`, inline: true },
        { name: '✨ Boosts', value: `${guild.premiumSubscriptionCount || 0}`, inline: true },
        { name: '🔐 Verification', value: guild.verificationLevel, inline: true }
      ],
      footer: { text: 'Lunaire Server Manager' }
    };
    
    message.channel.send({ embeds: [serverInfo] });
  }
  
  // USER INFO COMMAND
  else if (command === 'userinfo' || command === 'user') {
    const target = message.mentions.members.first() || message.member;
    const user = target.user;
    
    const userInfo = {
      color: client.config.SERVER.ACCENT_COLOR,
      title: `👤 ${user.tag}`,
      thumbnail: { url: user.displayAvatarURL() },
      fields: [
        { name: '🆔 User ID', value: user.id, inline: true },
        { name: '📅 Account Created', value: `<t:${Math.floor(user.createdTimestamp / 1000)}:R>`, inline: true },
        { name: '📥 Joined Server', value: `<t:${Math.floor(target.joinedTimestamp / 1000)}:R>`, inline: true },
        { name: '🎭 Roles', value: target.roles.cache.size - 1, inline: true },
        { name: '🎨 Highest Role', value: target.roles.highest.toString(), inline: true },
        { name: '🤖 Bot Account', value: user.bot ? 'Yes' : 'No', inline: true }
      ],
      footer: { text: 'Lunaire Server Manager' }
    };
    
    message.channel.send({ embeds: [userInfo] });
  }
  
  // MODERATION: CLEAR MESSAGES
  else if (command === 'clear' || command === 'purge') {
    if (!checkPermission(message, 'MODERATOR')) {
      return message.reply('❌ You need moderator permissions to use this command.');
    }
    
    const amount = parseInt(args[0]) || 10;
    if (amount < 1 || amount > 100) {
      return message.reply('❌ Please provide a number between 1-100');
    }
    
    try {
      await message.channel.bulkDelete(amount + 1);
      const confirmation = await message.channel.send(`✅ Cleared ${amount} messages`);
      setTimeout(() => confirmation.delete(), 3000);
    } catch (error) {
      message.reply('❌ Error clearing messages');
    }
  }
  
  // 7W7 HELPER COMMANDS
  else if (command === '7w7help' && client.features.ENABLED_FEATURES.SEVENWSEVEN_HELPER) {
    message.channel.send({
      embeds: [{
        color: 0x9B59B6,
        title: '🎴 7w7 Helper - Lunaire Integration',
        description: 'Enhance your 7w7 experience with these commands:',
        fields: [
          { name: '!7w7ping', value: 'Toggle card notifications', inline: true },
          { name: '!7w7tiers', value: 'View card tier information', inline: true },
          { name: '!7w7status', value: 'Check 7w7 helper status', inline: true }
        ],
        footer: { text: 'Lunaire - Optional 7w7 Integration' }
      }]
    });
  }
  
  else if (command === 'ping') {
    message.reply(`🏓 Pong! Latency: ${Date.now() - message.createdTimestamp}ms`);
  }
});

// ========================
// 7W7 AUTO-DETECTION
// ========================
client.on('messageCreate', async (message) => {
  if (!client.features.ENABLED_FEATURES.SEVENWSEVEN_HELPER) return;
  
  if (message.author.id === client.features.SEVENWSEVEN.BOT_ID) {
    if (message.content.toLowerCase().includes('wild waifu appeared') && message.embeds.length > 0) {
      const embed = message.embeds[0];
      const embedColor = embed.color;
      
      let tier = 'UNKNOWN';
      for (const [tierName, colorCode] of Object.entries(client.features.SEVENWSEVEN.TIER_COLORS)) {
        if (embedColor === colorCode) {
          tier = tierName;
          break;
        }
      }
      
      if (['LEGENDARY', 'EPIC'].includes(tier)) {
        const pingRole = message.guild.roles.cache.get(client.features.SEVENWSEVEN.NOTIFY_ROLE);
        if (pingRole) {
          try {
            await message.channel.send({
              content: `${pingRole} 🎉 **${tier} 7W7 CARD SPAWNED!**`,
              allowedMentions: { roles: [pingRole.id] }
            });
          } catch (error) {
            console.log('7w7 notification error:', error);
          }
        }
      }
    }
  }
});

// ========================
// START LUNAIRE BOT
// ========================
client.login(process.env.BOT_TOKEN);
